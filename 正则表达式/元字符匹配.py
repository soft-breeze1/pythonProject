"""
.   --匹配任意1个字符（除了\n），\.匹配点本身
[]  --匹配[]中列举的字符
\d  --匹配数字，即0-9
\D  --匹配非数字
\s  --匹配空白，即空格、tab键
\S  --匹配非空白
\w  --匹配单词字符，即a-z、A-Z、0-9, _
\W  --匹配非单词字符
"""
import re

s = "itheima1 @@python2 !!666 ##itcast3"

result = re.findall(r'\d',s)
print(result)
# 字符串的r标记，表示当前字符串是原始字符串，即内部的转义字符无效而是普通字符

result1 = re.findall(r'\W',s)
print(result1)
# 自定义寻找字母
result2 = re.findall(r'[a-zA-Z]',s)
print(result2)
# 自定义寻找数字
result3 = re.findall(r'[0-5]',s)
print(result3)

"""
数量匹配:
*     --匹配前一个规则的字符出现0至无数次
+     --匹配前一个规则的字符出现1至无数次
?     --匹配前一个规则的字符出现0次或1次
{m}   --匹配前一个规则的字符出现m次
{m,}  --匹配前一个规则的字符出现最少m次
{m,n} --匹配前一个规则的字符出现m到n次
--------------------------------------------------------------------------
边界匹配:
^     --匹配字符串开头
$     --匹配字符串结尾
\b    --匹配一个单词的边界
\B    --匹配非单词边界
--------------------------------------------------------------------------
分组匹配:
|     --匹配左右任意一个表达式
()    --将括号中字符作为一个分组
"""

# 匹配账号，只能由字母和数字组成，长度限制6到10位
r = '^[0-9a-zA-Z]{6,10}$'
s = '1234567'
print(re.findall(r,s))
# 匹配QQ号，要求纯数字，长度5-11，第一位不为0
r = '^[1-9][0-9]{4,10}$'
s = '012345678'
print(re.findall(r,s))
# 匹配邮箱地址，只允许QQ,163,gmail这三种邮箱地址
# {内容}.{内容}.{内容}.{内容}.{内容}.{内容}.{内容}.{内容}@{内容}.{内容}.{内容}
g = r'^([\w-]+(\.[\w-]+)*@(qq|163|gmail)(\.[\w-]+)+$)'     #  *代表(\.[\w-]+)出现0到无数次
s = 'a.b.c.d.e.f.g@qq.com.a.z.c.d.e'
print(re.match(g,s))
